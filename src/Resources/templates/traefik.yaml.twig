# Traefik 2 - Reverse Proxy
    traefik:
        <<: *common-keys-core # See EXTENSION FIELDS at the top
        container_name: traefik
        image: traefik:2.9
        command: # CLI arguments
            - --global.checkNewVersion=true
            - --global.sendAnonymousUsage=true
            - --entryPoints.http.address=:80
            - --entryPoints.https.address=:443
            - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
            - --entryPoints.traefik.address=:8080
            - --api=true
            - --api.dashboard=true
            # - --serversTransport.insecureSkipVerify=true
            - --log=true
            - --log.filePath=/logs/traefik.log
            - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
            - --accessLog=true
            - --accessLog.filePath=/logs/access.log
            - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
            - --accessLog.filters.statusCodes=204-299,400-499,500-599
            - --providers.docker=true
            - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
            - --providers.docker.exposedByDefault=false
            # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
            - --entrypoints.https.http.tls.certresolver=dns-cloudflare
            - --entrypoints.https.http.tls.domains[0].main=$DOMAIN
            - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN
            - --providers.docker.network=t2_proxy
            - --providers.docker.swarmMode=false
            - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
            - --providers.file.watch=true # Only works on top level files in the rules folder
            #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
            - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
            - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
        networks:
            - {{ networkName }}
        ports:
            - target: 80
              published: 80
              protocol: tcp
              mode: host
            - target: 443
              published: 443
              protocol: tcp
              mode: host
            - target: 8080 # insecure api wont work
              published: 8080
              protocol: tcp
              mode: host
        volumes:
            - $DOCKERDIR/traefik2/rules/cloudserver:/rules # file provider directory
            - /var/run/docker.sock:/var/run/docker.sock:ro # If you use Docker Socket Proxy, comment this line out
            - $DOCKERDIR/traefik2/acme/acme.json:/acme.json # cert location - you must create this empty file and change permissions to 600
            - $DOCKERDIR/logs/traefik:/logs # for fail2ban or crowdsec
            - $DOCKERDIR/shared:/shared
        environment:
            - TZ=$TZ
            - CF_API_EMAIL=$CLOUDFLARE_EMAIL
            - CF_API_KEY=$CLOUDFLARE_API_KEY
            - DOMAIN # Passing the domain name to the traefik container to be able to use the variable in rules.
        labels:
            - "traefik.enable=true"
            # HTTP-to-HTTPS Redirect
            - "traefik.http.routers.http-catchall.entrypoints=http"
            - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
            - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
            - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
            # HTTP Routers
            - "traefik.http.routers.traefik-rtr.entrypoints=https"
            - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN`)"
            #- "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
            # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
            - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN"
            - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN"
            ## Services - API
            - "traefik.http.routers.traefik-rtr.service=api@internal"
            ## Middlewares
            - "traefik.http.routers.traefik-rtr.middlewares=chain-auth@file"